<!DOCTYPE html>
<html>
<head>
	<title>Poonya документация</title>
	<link rel="shortcut icon" href="./dist/poonya/img/poo_logo.png" type="image/x-icon">

	<link rel="stylesheet" href="./dist/$css/css.bundle.css">
	<link rel="stylesheet" href="./dist/poonya/css/css.bundle.css">

	<style>
        *[rendertarget="true"]::before {
            background-image: url(./dist/poonya/img/poo_logo.png);
        }
    </style>
</head>
<body>
	<div class="container">
		<script type='page-config'>
			this.setLogo('./dist/poonya/img/poo_logo.png', false);
			
			this.setStart('main-poonya', null);
			this.setTitle('#!Poonya', 'https://github.com/AseWhy/Poonya');
			
            this.buttons.add('Пунья', 'main-poonya');
            this.buttons.add('Начиная', 'get-started');
            this.buttons.add('Интеграция', 'poonya-integration');
            this.buttons.add('Синтаксис', 'poonya-syntax');
        </script>

		<div class="content">
			<div class="nav-bar">
				<div class="nav-container">
					<button class="left-variator contentlink" type="c-link" target='main-poonya'>Пунья</button>
					<div class="sub-level">
						<button class="left-variator contentlink" type="c-link" target='main-poonya#about_name'>О названии</button>
						<button class="left-variator contentlink" type="c-link" target='main-poonya#links'>Ссылки</button>
					</div>
					<button class="left-variator contentlink" type="c-link" target='get-started'>Начиная</button>
					<button class="left-variator contentlink" type="c-link" target='poonya-integration'>Интеграция</button>
					<div class="sub-level">
						<button class="left-variator contentlink" type="c-link" target='poonya-integration#message'>MessagePattern</button>
						<button class="left-variator contentlink" type="c-link" target='poonya-integration#execution'>ExecutionPattern</button>
						<button class="left-variator contentlink" type="c-link" target='poonya-integration#expression'>ExpressionPattern</button>
					</div>
					<button class="left-variator contentlink" type="c-link" target='poonya-syntax'>Синтаксис</button>
					<div class="sub-level">
						<button class="left-variator contentlink" type="c-link" target='poonya-syntax#block'>Блочный синтаксис</button>
						<div class="sub-level">
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#if'>Инструкция: if</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#while'>Инструкция: while</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#repeat'>Инструкция: repeat</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#set'>Инструкция: set</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#out'>Оператор вывода</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#out'>Оператор добавления</button>
						</div>
						<button class="left-variator contentlink" type="c-link" target='poonya-syntax#block'>Cинтаксис выражений</button>
						<div class="sub-level">
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#plus'>Оператор: сложения</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#minus'>Оператор: вычитания</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#equal'>Оператор: присваивания/равенства</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#mult'>Оператор: умножения</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#div'>Оператор: деления</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#big'>Опертаор: больше</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#less'>Оператор: меньше</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#and'>Оператор: и</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#or'>Оператор: или</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#or'>Группы выражений</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#or'>Вызов функции</button>
							<button class="left-variator contentlink" type="c-link" target='poonya-syntax#or'>Конструкторы объектов</button>
						</div>
					</div>
				</div>
			</div>

			<div class="content-view" rendertarget="true">
				
			</div>
		</div>

		<script type="page-pattern" name="main-poonya">
			# Poonya
			Пунья - относительно легкий шаблонизатор (61.5 Кб весит сжатый бандл пуньи), который не нацелен на конкретную область применения. Вы можете использовать его для вашего чат-бот проекта, а можете для рендеринга web страниц. Так-же вы можете использовать пунью в браузере, и писать шаблоны прямо в html странице.
			
			Пунья была написана мной, по причине надобности текстового шаблонизатора, для работы одного моего проекта. Все началось с задачи по написанию чат бота, мне не понравилось использование регулярных выражений для составления ответа бота, посколько они не давали в полной мере реализовать логику вывода текста. Я решил написать текстовый шаблонизаор для этой цели.

			## О названии ~[about_name]
			В целом никого скрытого смысла в названии нет, просто я люблю животных. Саму пунью китайцы назвали огненной лисой, что звучало как «хон хо». Другим именем было «кошачий медведь». Жители Непала называли это животное «пунья» и именно от этого слова и произошло название «панда» и именно это название было нагло использованно мной для наименования этого проекта.

			В течение продолжительного периода времени малую (красную) панду то выделяли в отдельное семейство, то относили к семейству медвежьих, то причисляли к енотам. Путаницу вносило то, что движения красной панды похожи на медвежьи: она также как и он может сидеть на задних конечностях, хорошо владеет передними конечностями, лазает по деревьям, кричит и злится. Но в то же время по внешнему виду очень напоминает енота-полоскуна. Сходство с енотами усиливали общие черты в строении черепа, хвоста и зубов, а анализ ДНК указывал на родство с медведями.

			![Poonya](./data/poonya/img/nkC8kLV_2qc.jpg)
			
			## Ссылки ~[links]
			[Я на GitHub](https://github.com/AseWhy)
			&middot;
			[Poonya на GitHub](https://github.com/AseWhy/Poonya)
		</script>

		<script type="page-pattern" name="get-started">
			# Начиная

			Для начала работы с пуньей, вам необходимо её скачать, вы можете использовать `npm install --save github:AseWhy/Poonya`. После этого вы можете использовать пунью как в nodejs так и в браузере, для использования в nodejs просто подключите пунью

			```js
			const { ExecutionPattern, MessagePattern, ExpressionPattern } = require('poonya');
			```

			Для использования в браузере, вам необходимо сначала подключить бандл с любым понравившимся методом экспорта, их есть три `var`, `amd`, и `system`. В случае `var`, в глобальном контексте просто будет создана переменная poonya, которая будет содержать все наобходимые классы, в случае `amd` и `system` вы можете посмотреть [здесь](https://tproger.ru/translations/js-modules-formats-loaders-builders/).

			Скрипт подключется, так-же как это обычно делается в html

			```html
			<script src='./js/poonya.browser.var.bundle.min.js'/>
			```

			После чего вы сможете использовать пунью так:

			```js
			(async ({ ExecutionPattern, MessagePattern, ExpressionPattern }) => {
				// Используйте пунью тут...
			})(poonya);
			```
		</script>

		<script type="page-pattern" name="poonya-integration">
			# Интеграция

			Под интеграцией, я порузамиваю способы внедрения пуньи в ваше приложение.

			Для взаимодействия с пуньей, есть несколько интерфейсов и функций экспортируемых пакетом. Самые часты которые будут использоваться это шаблоны `MessagePattern`, `ExecutionPattern` и `ExpressionPattern`. И так пройдемся по ним всем:

			## MessagePattern ~[message]

			`MessagePattern` - это шаблон сообщение, суть его в том, что все что не в блоке `'prefix'` { `//` code `//` } игнорируется парсером и выводится как обычный текст. То есть всю логику шаблона необходимо прописывать в блоке, а не в теле, в отличии от того же `ExecutionPattern`'a.

			`MessagePattern` можно создать, импортировав его из пакета, любым удобным для вас способом, вызвав его конструктор, где первым аргументом необходимо передать строку текста для парсинга, или объект описывающий входные данные, а вторым префикс для блока (по умолчанию он будет poonya).

			```js
			(async ({ MessagePattern }) => {
				const pattern = new MessagePattern(`
					I’m having a great time here in Sydney. The different sports are exciting, and there are lots of other exciting things too.
					For example the mascots are really great! They are called Olly, Syd and Millie.
					They are Australian ‘ animals and they are the symbols of the Sydney Games.
					The kookaburra is an Australian bird. She got her name, Olly, from the word ‘Olympics’.
					She’s a symbol of friendship and honesty. Then there’s Syd (from Sydney).
					He’s a platypus with a duck’s nose. He’s the symbol of the city of Sydney and its people.
					The third mascot is Millie. She’s an Australian animal — an echidna. She’s the symbol of the new millennium.
					So now I’ve got a mascot too. He’s called Ozzie (from Aus­tralia) and he’s a cute, cuddly koala.
							
					poonya {
						if(ok) {
							> "It's ok!";
						} else {
							> "It's not ok :(";
						}
					}
				`, poonya);

				await pattern.result({
					ok: true
				}).complete();
			})(poonya);
			```

			Код выше выводит текст, а потом в соответствии с первым аргументом выводит `It's ok!` или `It's not ok :(`. Обратите внимание, что префикс для блока можно поменять. Ниже приведен такблица параметров которые может принимать `MessagePattern`:

			| Параметр| тип									    |описание																							    |
			|---------|-----------------------------------------|-------------------------------------------------------------------------------------------------------|
			| input   | **String** \| `typeof` **PatternInput** | Вход шаблона, То есть это строка или другой набор данных которые вы передаете шаблонизатору. 		    |
			| prefix  | **String**  							| Префикс для шаблона, по умолчанию используется poonya.											    |
			| import  | **Array**`<`**String**`>`				| Нативные библиотеки для импорта. По умолчанию - пустой массив.									    |
			| logger  | `typeof` **Console**					| Интерфейс вывода, за основу взят **Console**, и по умолчанию используется глбальный объект `console`. |

			## ExecutionPattern ~[execution]

			`ExecutionPattern` - это шаблон выполнения кода poonya. Все что в него передано, будет распознано парсром как код poonya со всеми его синтаксическими особенностями.

			`ExecutionPattern` можно создать, импортировав его из пакета, любым удобным для вас способом, вызвав его конструктор, где первым аргументом необходимо передать строку текста для парсинга, или объект описывающий входные данные.

			```js
			(async ({ ExecutionPattern }) => {
				const pattern = new ExecutionPattern(`
					> 'I’m having a great time here in Sydney. The different sports are exciting, and there are lots of other exciting things too.';
					> 'For example the mascots are really great! They are called Olly, Syd and Millie.';
					> 'They are Australian ‘ animals and they are the symbols of the Sydney Games.';
					> 'The kookaburra is an Australian bird. She got her name, Olly, from the word ‘Olympics’.';
					> 'She’s a symbol of friendship and honesty. Then there’s Syd (from Sydney).';
					> 'He’s a platypus with a duck’s nose. He’s the symbol of the city of Sydney and its people.';
					> 'The third mascot is Millie. She’s an Australian animal — an echidna. She’s the symbol of the new millennium.';
					> 'So now I’ve got a mascot too. He’s called Ozzie (from Aus­tralia) and he’s a cute, cuddly koala.';

					if(ok) {
						> "It's ok!";
					} else {
						> "It's not ok :(";
					}
				`);

				await pattern.result({
					ok: true
				}).complete();
			})(poonya);
			```

			Код выше выводит текст, а потом в соответствии с первым аргументом выводит `It's ok!` или `It's not ok :(`. Обратите внимание, что все что было передано в конструктор является шаблоном poonya. Ниже приведен такблица параметров которые может принимать `ExecutionPattern`:

			| Параметр| тип									    |описание																							    |
			|---------|-----------------------------------------|-------------------------------------------------------------------------------------------------------|
			| input   | **String** \| `typeof` **PatternInput** | Вход шаблона, То есть это строка или другой набор данных которые вы передаете шаблонизатору. 		    |
			| import  | **Array**`<`**String**`>`				| Нативные библиотеки для импорта. По умолчанию - пустой массив.								        |
			| logger  | `typeof` **Console**					| Интерфейс вывода, за основу взят **Console**, и по умолчанию используется глбальный объект `console`. |

			## ExpressionPattern ~[expression]

			`ExpressionPattern` - наиболее специфичный шаблон. Отличается он тем, что в целом это обычный шаблон, но вход должен представлять из себя выражение. То есть инструкции, которые работали бы в теле или в блоке, не будут работать в `ExpressionPattern`

			`ExpressionPattern` можно создать, импортировав его из пакета, любым удобным для вас способом, вызвав его конструктор, где первым аргументом необходимо передать строку с выражением, или объект описывающий входные данные.
		
		
			```js
			(async ({ ExpressionPattern }) => {
				const pattern = new ExpressionPattern(`2 + 2 * 2 + val`);

				await pattern.result({
					val: 2
				});
			})(poonya);
			```

			Код выше выведет 8, в соответствии с выражением `2 + (2 * 2) + 2`. Ниже приведена таблица с полным описанием принимаемых конструктором значений.

			| Параметр| тип									    |описание																							    |
			|---------|-----------------------------------------|-------------------------------------------------------------------------------------------------------|
			| input   | **String** \| `typeof` **PatternInput** | Вход шаблона, То есть это строка или другой набор данных которые вы передаете шаблонизатору. 		    |
			| import  | **Array**`<`**String**`>`				| Нативные библиотеки для импорта. По умолчанию - пустой массив.									    |
			| logger  | `typeof` **Console**					| Интерфейс вывода, за основу взят **Console**, и по умолчанию используется глбальный объект `console`. |
		</script>

		<script type="page-pattern" name="poonya-syntax">
			# Синтаксис

			Синтаксис в poonya почти эквивалентен большинству языков программирования, со своими специфическими особенностями. Синтаксис в poonya можно разделить на две категории:
			* Блочный синтаксис
			* Синтаксис выражения

			## Блочный синтаксис ~[block]
			Блочный синтаксис распостраняется только на блоки кода poonya. Обычно они представляют из себя код poonya в `{}` - фигурных скобках, но есть исключения в виде главного блока, который, по понятным причинам, заключать в скобки не надо.

			Блочный синтаксис представляет из себя последовательность инструкций, которые выполняются интерпритатором poonya в заданом порядке.

			### Инструкция if ~[if]
			`if` - представляет из себя инструкцию условного блока. Используется она следующим образом: `if`(`<`**условие**`>`) { `//` code `//` } `?`**else** `?`**if** (`<`**условие**`>`) { `//` code `//` }. `if` будет выполнена, если условие `<`**условие**`>` будет выполнено. После завершения выполнения инструкции, интерпритатор перейдет к выполнению следующей инструкции.

			```js
			set i = 5;

			if(i = 5){
				> '`i` это 5';
			} else {
				> '`i` это не 5';
			}
			```

			Обратите внимание что конструкцию `if ... else` можно совмещать:

			```js
			set i = 6;

			if(i = 5){
				> '`i` это 5';
			} else if(i = 6){
				> '`i` это 6';
			} else {
				> '`i` это не 5 и не 6';
			}
			```

			Таким образом можно продолжать до бесконечности. 

			### Инструкция while ~[while]
			`while` - представляет из себя инструкцию условного цикла. Используется она следующим образом: `while`(`<`**условие**`>`) { `//` code `//` }. `while` будет сполнятся до тех пор, пока условие `<`**условие**`>` выполняется. После завершения выполнения инструкции, интерпритатор перейдет к выполнению следующей инструкции.

			```js
			set i = 0;

			while(i < 100){
				> 'i = ' + i + endl;
			}
			```

			\- выведет `i = 0...99`, обратите внимание 100 не включено, поскольку при `i == 100` условие перестает выполнятся.

			### Инструкция repeat ~[repeat]
			`repeat` - представляет из себя инструкцию диапазонного цикла. Используется она следующим образом: `repeat`(`<`**с индекс**`>`; `<`**по индекс**`>`) { `//` code `//` }. `repeat` будет выполнятся (`<`**по индекс**`>` - `<`**с индекс**`>`) раз. В теле цикла, так-же доступна переменная `current`, которая содержит текущую итерируемую позицию. После завершения выполнения инструкции, интерпритатор перейдет к выполнению следующей инструкции.

			```js
			repeat(0; 100){
				> 'i = ' + current + endl;
			}
			```

			\- выведет `i = 0...99`.

			### Инструкция set ~[set]
			`set` - представляет из себя инструкцию объявления переменной, и её инициазацию. Используется она следующим образом: `set` `<`**название переменной**`>` = `<`**значение**`>`. Установка действует для текущей области действия и дочерних областей действия. Вы можете использовать эту инструкцию для переопределения переменной в текущей области действия.

			```js
			set i = 2 + 2 * 2;

			> i;
			```

			Код выше выведет `6`;

			### Оператор вывода ~[out]
			Оператор вывода, представляет из себя оператор `>`, который интерпритируется как команда вывода в поток вывода, который возвращает шаблон. Используется оператор вывода следующим образом: `>` `<`**выражение**`>`.

			```js
			> 2 + 2 * 2;
			```

			Код выше выведет `6`;

			### Оператор добавления ~[add]
			Оператор добавления, представляет из себя оператор `<-`, который интерпритируется как команда добавления в массив, переменная с которым должна быть расположена слева, а добавляемое значение справа. Используется оператор добавления следующим образом: `<`**массив подобный**`>` `<-` `<`**выражение**`>`.

			```js
			set array = Array -> *;

			array <- 5;

			> array;
			```

			Код выше выведет `[ 5 ]`;
		</script>

		<script src="./dist/$js/js.bundle.js"></script>
	</div>
</body>
</html>